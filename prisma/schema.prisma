// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  clerkId String @unique
  email String  @unique
  name  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  ownedTrips Trip[]      // 作成したプラン
  tripMembers TripMember[] // 参加しているプラン
  invitations Invitation[]
}

model Trip {
  id Int @id @default(autoincrement())
  title String
  destination String
  budget Int
  description String?
  startDate DateTime
  endDate DateTime
  originalFileName String?
  fileName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  ownerId Int
  owner User @relation(fields: [ownerId], references: [id])
  members TripMember[]
  schedules Schedule[]
  todos Todo[]
  photos Photo[]
  invitations Invitation[]
}

model TripMember {
  id Int @id @default(autoincrement())
  tripId Int
  userId Int
  role      MemberRole @default(VIEWER)
  joinedAt DateTime @default(now())

  // リレーション
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 同じユーザーが同じプランに重複参加できないようにする
  @@unique([tripId, userId])
}
enum MemberRole {
  OWNER
  EDITOR
  VIEWER
}

model Invitation {
  id           Int          @id @default(autoincrement())
  tripId       Int
  invitedEmail String
  invitedBy    Int
  token        String          @unique
  status       InvitationStatus @default(PENDING)
  expiresAt    DateTime
  createdAt    DateTime        @default(now())

  // リレーション
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  inviter User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([tripId])
  @@index([invitedBy])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}


model Schedule {
  id Int @id @default(autoincrement())
  tripId Int
  title String
  description String
  date DateTime
  startTime DateTime
  endTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Todo {
  id Int @id @default(autoincrement())
  tripId Int
  title String
  description String?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Photo {
  id Int @id @default(autoincrement())
  tripId Int
  userId Int
  fileName String // Supabase Storageのファイル名
  originalName String // 元のファイル名
  description String?
  uploadedAt DateTime @default(now())

  // リレーション
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
}
